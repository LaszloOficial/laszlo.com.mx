
=============

package download;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DownloadFile {

	private static final String[] rutasArchivos = {
		"https://download.fedoraproject.org/pub/fedora/linux/releases/23/Workstation/x86_64/iso/Fedora-Live-Workstation-x86_64-23-10.iso"
	};
	private static final String rutaDownload = "C:\\Users\\FernandoLaszlo\\Downloads\\Linux\\";

	private static final StringBuilder sb = new StringBuilder();
	private static final DecimalFormat dfPorcentaje = new DecimalFormat("00.00");
	private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy hh:mm:ss.SSS a");
	private static final Date fecha = new Date();
	private static DecimalFormat dfAvance;
	private static FileWriter fw;

	public static void main(String[] args) throws IOException {
		fw = new FileWriter(new File(rutaDownload + "log2.log"));
		for(String rutaArchivo : rutasArchivos) {
			final String nombreArchivo = rutaArchivo.substring(rutaArchivo.lastIndexOf('/'));
			try {
				final URLConnection urlConnection = new URL(rutaArchivo).openConnection();
				final DownloadFileThread downloadFileThread = new DownloadFile().new DownloadFileThread(urlConnection.getInputStream(), nombreArchivo);
				downloadFileThread.start();
				imprimir("Empieza a descargarse el archivo: " + rutaArchivo + " a " + rutaDownload + nombreArchivo);
				final int tamanio = urlConnection.getContentLength();
				final int longitud = Integer.toString(tamanio).length();
				final StringBuilder pattern = new StringBuilder(longitud);
				for (int i = 0; i < longitud; i++) {
					pattern.append('0');
				}
				dfAvance = new DecimalFormat(pattern.toString());
				while (downloadFileThread.isAlive()) {
					imprimir(progreso(downloadFileThread, tamanio, nombreArchivo));
					Thread.sleep(500L);
				}
				if (downloadFileThread.exception != null) {
					throw downloadFileThread.exception;
				}
				imprimir("Se descarg칩 exitosamente el archivo: " + nombreArchivo);
			} catch (Exception e) {
				imprimir(e.getMessage());
			}
		}
		imprimir("FIN!");
		fw.close();
	}

	private static final String progreso(DownloadFileThread downloadFileThread, int tamanio, String nombreArchivo) {
		double porcentaje = (double) downloadFileThread.total / (double) tamanio * 100D;
		sb.delete(0, sb.length()).append("Descargando ")
			.append(dfAvance.format(downloadFileThread.total))
			.append(" de ").append(tamanio).append(" bytes [")
			.append(dfPorcentaje.format(porcentaje)).append("% ");
		int i = 0;
		for (; i < (int) porcentaje; i++) {
			sb.append('=');
		}
		sb.append('>');
		for (; i < 99; i++) {
			sb.append(' ');
		}
		sb.append("] de ").append(nombreArchivo);
		return sb.toString();
	}

	private static final void imprimir(String s) throws IOException {
		fecha.setTime(System.currentTimeMillis());
		final String texto = sb.delete(0, sb.length()).append('[')
			.append(sdf.format(fecha).toUpperCase()).append("] - ")
			.append(s).toString();
		System.out.println(texto);
		fw.append(texto).append('\n').flush();
	}

	private final class DownloadFileThread extends Thread {
		private volatile int total = 0;
		private volatile Exception exception = null;
		private final InputStream is;
		private final String nombreArchivo;

		private DownloadFileThread(InputStream is, String nombreArchivo) {
			this.is = is;
			this.nombreArchivo = nombreArchivo;
		}

		public void run() {
			try {
				final FileOutputStream fos = new FileOutputStream(rutaDownload + nombreArchivo);
				final byte[] buffer = new byte[1024];
				int leido;
				while ((leido = is.read(buffer)) > 0) {
					total += leido;
					fos.write(buffer, 0, leido);
				}
				is.close();
				fos.flush();
				fos.close();
			} catch (Exception e) {
				exception = e;
			}
		}
	}
}

====

package email;

import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class Email {

	public static void main(String[] args) {
		try{
			Properties props = new Properties();
			// Nombre del host de correo, es smtp.gmail.com
			props.setProperty("mail.smtp.host", "smtp.gmail.com");	
			// TLS si est치 disponible
			props.setProperty("mail.smtp.starttls.enable", "true");
			// Puerto de gmail para envio de correos
			props.setProperty("mail.smtp.port","587");
			// Nombre del usuario
			props.setProperty("mail.smtp.user", "laszlo.2099@gmail.com");
			// Si requiere o no usuario y password para conectarse.
			props.setProperty("mail.smtp.auth", "true");
			Session session = Session.getDefaultInstance(props);
			// Para obtener un log de salida m치s extenso
			session.setDebug(true);
			BodyPart texto = new MimeBodyPart();
			// Texto del mensaje
			texto.setText("Texto del mensaje");
			BodyPart adjunto = new MimeBodyPart();
			// Cargamos la imagen
			adjunto.setDataHandler(new DataHandler(new FileDataSource("C:\\Users\\Laszlo\\Documents\\Archivo.txt")));
			// Opcional. De esta forma transmitimos al receptor el nombre original del fichero de imagen.
			adjunto.setFileName("Archivo.txt");
			MimeMultipart multiParte = new MimeMultipart();
			multiParte.addBodyPart(texto);
			multiParte.addBodyPart(adjunto);
			MimeMessage message = new MimeMessage(session);
			// Se rellena el From
			message.setFrom(new InternetAddress("laszlo.2099@gmail.com"));
			// Se rellenan los destinatarios
			message.addRecipient(Message.RecipientType.TO, new InternetAddress("fernando.temesi@gnp.com.mx"));
			// Se rellena el subject
			message.setSubject("Subject");
			// Se mete el texto y la foto adjunta.
			message.setContent(multiParte);
			Transport t = session.getTransport("smtp");
			// Aqui usuario y password de gmail
			t.connect("laszlo.2099@gmail.com","contrasenia");
			t.sendMessage(message, message.getAllRecipients());
			t.close();
		} catch (Exception e){
			System.out.println("No se pudo!");
		}
	}
}

=====

package email;

import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import com.drew.imaging.ImageMetadataReader;
import com.drew.metadata.exif.ExifSubIFDDirectory;

public class MandarFotos  {

	public static void main(String[] args)  {
		final String carpetaFotos = "C:\\Users\\FernandoLaszlo\\Pictures\\Nueva carpeta";
		try {
			final Properties props = new Properties();
			props.setProperty("mail.smtp.host", "smtp.gmail.com");	
			props.setProperty("mail.smtp.starttls.enable", "true");
			props.setProperty("mail.smtp.port", "587");
			props.setProperty("mail.smtp.user", "laszlo.2099@gmail.com");
			props.setProperty("mail.smtp.auth", "true");
			final File[] fotos = new File(carpetaFotos).listFiles();
			Arrays.sort(fotos, new Comparator<File>() {
				@Override public int compare(File f1, File f2) {
					return -f1.compareTo(f2);
				}
			});
			final DecimalFormat df = new DecimalFormat("000");
			final InternetAddress from = new InternetAddress("laszlo.2099@gmail.com");
			final InternetAddress to = new InternetAddress("laszlo.2099@gmail.com");
			final InternetAddress[] copy =  {new InternetAddress("laszlo.2099@outlook.com"), new InternetAddress("araceli.villagran@yahoo.com.mx")};
			final long sieteHoras = 7 * 60 *60 * 1000;
			final SimpleDateFormat sdfNomb = new SimpleDateFormat("yyyyMMddhhmmss");
			final SimpleDateFormat sdfDesc = new SimpleDateFormat("d 'de' MMMM 'de' yyyy, h:mm:ss a");
			int i = 0;
			for(File fotoActual: fotos) {
				if(fotoActual.getName().endsWith(".JPG")) {
					++i;
				}
			}
			final int total = 923;
			for(int cont = 0 ; cont < total; cont++) {
				try {
					final File fotoActual = fotos[cont];
					if(fotoActual.getName().endsWith(".JPG")) {
						final Date fechaCaptura = new Date(ImageMetadataReader.readMetadata(fotoActual).getDirectory(ExifSubIFDDirectory.class).getDate(ExifSubIFDDirectory.TAG_DATETIME_ORIGINAL).getTime() + sieteHoras);
						final String fotoNum = sdfNomb.format(fechaCaptura) + ".jpg";
						final Session session = Session.getDefaultInstance(props);
						final BodyPart texto = new MimeBodyPart();
						texto.setText(sdfDesc.format(fechaCaptura));
						final BodyPart adjunto = new MimeBodyPart();
						adjunto.setDataHandler(new DataHandler(new FileDataSource(fotoActual)));
						adjunto.setFileName(fotoNum);
						final MimeMultipart multiParte = new MimeMultipart();
						multiParte.addBodyPart(texto);
						multiParte.addBodyPart(adjunto);
						final MimeMessage message = new MimeMessage(session);
						message.setFrom(from);
						message.addRecipient(Message.RecipientType.TO, to);
						message.addRecipients(Message.RecipientType.CC, copy);
						message.setSubject("Foto " + df.format(i) + "/" + df.format(total));
						message.setContent(multiParte);
						final Transport t = session.getTransport("smtp");
						t.connect("laszlo.2099@gmail.com", "LugubreElocuente2");
						t.sendMessage(message, message.getAllRecipients());
						t.close();
						System.out.println("Se mand칩 correctamente la foto " + i-- + "/" + total + " (" + fotoNum + ")");
					}
				} catch(Exception e) {
					e.printStackTrace();
					cont--;
				}
			}
			System.out.println("El programa termin칩 correctamente!!!");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("No se pudo!");
		}
	}
}

====

package email;

import static java.lang.String.format;

import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class MandarManuales {
	
    private static final Date hoy = new Date();
    private static final SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss.SSS a");

	public static void main(String[] args) {
		final String carpetaManuales = "/media/0AE23D8CE23D7CCF/Users/Laszlo/Documents/Manuales";
		try{
			final Properties props = new Properties();
			props.setProperty("mail.smtp.host", "smtp.gmail.com");	
			props.setProperty("mail.smtp.starttls.enable", "true");
			props.setProperty("mail.smtp.port", "587");
			props.setProperty("mail.smtp.user", "laszlo.2099@gmail.com");
			props.setProperty("mail.smtp.auth", "true");
			final File[] manuales = new File(carpetaManuales).listFiles();
			final DecimalFormat df = new DecimalFormat("000");
			final InternetAddress from = new InternetAddress("laszlo.2099@gmail.com");
			final InternetAddress to = new InternetAddress("laszlo.2099@gmail.com");
			final InternetAddress[] copy = {new InternetAddress("laszlo.2099@gmail.com")};
			int totalManuales = manuales.length;
			int i = 0;
			for(File manualActual: manuales) {
				final String manualNum = "Manual " + df.format(totalManuales--) + " - " + manualActual.getName();
				try {
					imprimir("Se empieza a enviar el " + manualNum);
					final Session session = Session.getDefaultInstance(props);
					final BodyPart texto = new MimeBodyPart();
					texto.setText(manualNum);
					final BodyPart adjunto = new MimeBodyPart();
					adjunto.setDataHandler(new DataHandler(new FileDataSource(manualActual)));
					adjunto.setFileName(manualActual.getName());
					final MimeMultipart multiParte = new MimeMultipart();
					multiParte.addBodyPart(texto);
					multiParte.addBodyPart(adjunto);
					final MimeMessage message = new MimeMessage(session);
					message.setFrom(from);
					message.addRecipient(Message.RecipientType.TO, to);
					message.addRecipients(Message.RecipientType.CC, copy);
					message.setSubject(manualNum);
					message.setContent(multiParte);
					final Transport t = session.getTransport("smtp");
					t.connect("laszlo.2099@gmail.com", "contrasenia");
					t.sendMessage(message, message.getAllRecipients());
					t.close();
					imprimir("Se envi칩 correctamente el " + manualNum);
					if (i++ % 25 == 0) {
						System.gc();
					}
				} catch (Exception e) {
					imprimir("No se pudo enviar el " + manualNum);
					imprimir(e);
				}
			}
			imprimir("El programa termin칩 correctamente!!!");
		} catch (Exception e) {			
			imprimir("No se pudo!");
			imprimir(e);
		}
	}
	
    private static void imprimir(Throwable t) {
        System.err.println(t.toString());
        for (StackTraceElement stackTraceElement : t.getStackTrace()) {
            System.err.println(format("\tat %s", stackTraceElement));
        }
        final Throwable cause = t.getCause();
        if (cause != null) {
            System.err.println("Caused by: ");
            imprimir(cause);
        }
    }
    
    private static void imprimir(String s) {
        hoy.setTime(System.currentTimeMillis());
        System.out.println(format("%s - %s", sdf.format(hoy), s));
    }
}

============

	public static void sendMail(String fileName, String mailTo) {
        final String username = "fernando.temesi@globant.com";
        final String password = "Mayo2017";

        Properties props = new Properties();
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props,
          new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
          });
        try {
        	MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress("fernando.temesi@globant.com"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(mailTo));
            message.setSubject(fileName);
            // Create the message part
            BodyPart messageBodyPart = new MimeBodyPart();
            // Now set the actual message
            messageBodyPart.setText(fileName);
            // Create a multipar message
            Multipart multipart = new MimeMultipart();
            // Set text message part
            multipart.addBodyPart(messageBodyPart);
            // Part two is attachment
            messageBodyPart = new MimeBodyPart();
            DataSource source = new FileDataSource(fileName);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(fileName);
            multipart.addBodyPart(messageBodyPart);
            // Send the complete message parts
            message.setContent(multipart);
            Transport.send(message);
        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }
	}
	
============

http://programacion.net/articulo/15_snippets_de_java_que_haran_las_delicias_de_todo_programador_1334

======================


		try {
			return super.decrypt(key);
		} catch (Throwable e) {
	    	final StringWriter sw = new StringWriter();
	        e.printStackTrace(new PrintWriter(sw));
	        return sw.toString().replace("\n", "<br>");
		}	

		
===================================